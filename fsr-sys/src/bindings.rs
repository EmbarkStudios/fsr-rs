/* automatically generated by rust-bindgen 0.69.4 */

pub const MAX_NUM_SRVS: u32 = 16;
pub const MAX_NUM_UAVS: u32 = 8;
pub const MAX_NUM_CONST_BUFFERS: u32 = 2;
pub const MAX_CONST_SIZE: u32 = 64;
pub const UNSPECIFIED_VERSION: u32 = 4294946048;
pub const MAXIMUM_PATH: u32 = 260;
pub const RESOURCE_IDENTIFIER_NULL: u32 = 0;
pub const RESOURCE_IDENTIFIER_INPUT_OPAQUE_ONLY: u32 = 1;
pub const RESOURCE_IDENTIFIER_INPUT_COLOR: u32 = 2;
pub const RESOURCE_IDENTIFIER_INPUT_MOTION_VECTORS: u32 = 3;
pub const RESOURCE_IDENTIFIER_INPUT_DEPTH: u32 = 4;
pub const RESOURCE_IDENTIFIER_INPUT_EXPOSURE: u32 = 5;
pub const RESOURCE_IDENTIFIER_INPUT_REACTIVE_MASK: u32 = 6;
pub const RESOURCE_IDENTIFIER_INPUT_TRANSPARENCY_AND_COMPOSITION_MASK: u32 = 7;
pub const RESOURCE_IDENTIFIER_RECONSTRUCTED_PREVIOUS_NEAREST_DEPTH: u32 = 8;
pub const RESOURCE_IDENTIFIER_DILATED_MOTION_VECTORS: u32 = 9;
pub const RESOURCE_IDENTIFIER_DILATED_DEPTH: u32 = 10;
pub const RESOURCE_IDENTIFIER_INTERNAL_UPSCALED_COLOR: u32 = 11;
pub const RESOURCE_IDENTIFIER_LOCK_STATUS: u32 = 12;
pub const RESOURCE_IDENTIFIER_NEW_LOCKS: u32 = 13;
pub const RESOURCE_IDENTIFIER_PREPARED_INPUT_COLOR: u32 = 14;
pub const RESOURCE_IDENTIFIER_LUMA_HISTORY: u32 = 15;
pub const RESOURCE_IDENTIFIER_DEBUG_OUTPUT: u32 = 16;
pub const RESOURCE_IDENTIFIER_LANCZOS_LUT: u32 = 17;
pub const RESOURCE_IDENTIFIER_SPD_ATOMIC_COUNT: u32 = 18;
pub const RESOURCE_IDENTIFIER_UPSCALED_OUTPUT: u32 = 19;
pub const RESOURCE_IDENTIFIER_RCAS_INPUT: u32 = 20;
pub const RESOURCE_IDENTIFIER_LOCK_STATUS_1: u32 = 21;
pub const RESOURCE_IDENTIFIER_LOCK_STATUS_2: u32 = 22;
pub const RESOURCE_IDENTIFIER_INTERNAL_UPSCALED_COLOR_1: u32 = 23;
pub const RESOURCE_IDENTIFIER_INTERNAL_UPSCALED_COLOR_2: u32 = 24;
pub const RESOURCE_IDENTIFIER_INTERNAL_DEFAULT_REACTIVITY: u32 = 25;
pub const RESOURCE_IDENTIFIER_INTERNAL_DEFAULT_TRANSPARENCY_AND_COMPOSITION: u32 = 26;
pub const RESOURCE_IDENTITIER_UPSAMPLE_MAXIMUM_BIAS_LUT: u32 = 27;
pub const RESOURCE_IDENTIFIER_DILATED_REACTIVE_MASKS: u32 = 28;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE: u32 = 29;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_0: u32 = 29;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_1: u32 = 30;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_2: u32 = 31;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_3: u32 = 32;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_4: u32 = 33;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_5: u32 = 34;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_6: u32 = 35;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_7: u32 = 36;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_8: u32 = 37;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_9: u32 = 38;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_10: u32 = 39;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_11: u32 = 40;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_12: u32 = 41;
pub const RESOURCE_IDENTIFIER_INTERNAL_DEFAULT_EXPOSURE: u32 = 42;
pub const RESOURCE_IDENTIFIER_AUTO_EXPOSURE: u32 = 43;
pub const RESOURCE_IDENTIFIER_AUTOREACTIVE: u32 = 44;
pub const RESOURCE_IDENTIFIER_AUTOCOMPOSITION: u32 = 45;
pub const RESOURCE_IDENTIFIER_PREV_PRE_ALPHA_COLOR: u32 = 46;
pub const RESOURCE_IDENTIFIER_PREV_POST_ALPHA_COLOR: u32 = 47;
pub const RESOURCE_IDENTIFIER_PREV_PRE_ALPHA_COLOR_1: u32 = 48;
pub const RESOURCE_IDENTIFIER_PREV_POST_ALPHA_COLOR_1: u32 = 49;
pub const RESOURCE_IDENTIFIER_PREV_PRE_ALPHA_COLOR_2: u32 = 50;
pub const RESOURCE_IDENTIFIER_PREV_POST_ALPHA_COLOR_2: u32 = 51;
pub const RESOURCE_IDENTIFIER_PREVIOUS_DILATED_MOTION_VECTORS: u32 = 52;
pub const RESOURCE_IDENTIFIER_INTERNAL_DILATED_MOTION_VECTORS_1: u32 = 53;
pub const RESOURCE_IDENTIFIER_INTERNAL_DILATED_MOTION_VECTORS_2: u32 = 54;
pub const RESOURCE_IDENTIFIER_LUMA_HISTORY_1: u32 = 55;
pub const RESOURCE_IDENTIFIER_LUMA_HISTORY_2: u32 = 56;
pub const RESOURCE_IDENTIFIER_LOCK_INPUT_LUMA: u32 = 57;
pub const RESOURCE_IDENTIFIER_SCENE_LUMINANCE_MIPMAP_SHADING_CHANGE: u32 = 33;
pub const SHADING_CHANGE_MIP_LEVEL: u32 = 4;
pub const RESOURCE_IDENTIFIER_COUNT: u32 = 58;
pub const CONSTANTBUFFER_IDENTIFIER_FSR2: u32 = 0;
pub const CONSTANTBUFFER_IDENTIFIER_SPD: u32 = 1;
pub const CONSTANTBUFFER_IDENTIFIER_RCAS: u32 = 2;
pub const CONSTANTBUFFER_IDENTIFIER_GENREACTIVE: u32 = 3;
pub const AUTOREACTIVEFLAGS_APPLY_TONEMAP: u32 = 1;
pub const AUTOREACTIVEFLAGS_APPLY_INVERSETONEMAP: u32 = 2;
pub const AUTOREACTIVEFLAGS_APPLY_THRESHOLD: u32 = 4;
pub const AUTOREACTIVEFLAGS_USE_COMPONENTS_MAX: u32 = 8;
pub const LOCK_LIFETIME_REMAINING: u32 = 0;
pub const LOCK_TEMPORAL_LUMA: u32 = 1;
pub const VERSION_MAJOR: u32 = 2;
pub const VERSION_MINOR: u32 = 2;
pub const VERSION_PATCH: u32 = 1;
pub const CONTEXT_SIZE: u32 = 16536;
pub const SURFACE_FORMAT_UNKNOWN: SurfaceFormat = 0;
pub const SURFACE_FORMAT_R32G32B32A32_TYPELESS: SurfaceFormat = 1;
pub const SURFACE_FORMAT_R32G32B32A32_FLOAT: SurfaceFormat = 2;
pub const SURFACE_FORMAT_R16G16B16A16_FLOAT: SurfaceFormat = 3;
pub const SURFACE_FORMAT_R16G16B16A16_UNORM: SurfaceFormat = 4;
pub const SURFACE_FORMAT_R32G32_FLOAT: SurfaceFormat = 5;
pub const SURFACE_FORMAT_R32_UINT: SurfaceFormat = 6;
pub const SURFACE_FORMAT_R8G8B8A8_TYPELESS: SurfaceFormat = 7;
pub const SURFACE_FORMAT_R8G8B8A8_UNORM: SurfaceFormat = 8;
pub const SURFACE_FORMAT_R11G11B10_FLOAT: SurfaceFormat = 9;
pub const SURFACE_FORMAT_R16G16_FLOAT: SurfaceFormat = 10;
pub const SURFACE_FORMAT_R16G16_UINT: SurfaceFormat = 11;
pub const SURFACE_FORMAT_R16_FLOAT: SurfaceFormat = 12;
pub const SURFACE_FORMAT_R16_UINT: SurfaceFormat = 13;
pub const SURFACE_FORMAT_R16_UNORM: SurfaceFormat = 14;
pub const SURFACE_FORMAT_R16_SNORM: SurfaceFormat = 15;
pub const SURFACE_FORMAT_R8_UNORM: SurfaceFormat = 16;
pub const SURFACE_FORMAT_R8_UINT: SurfaceFormat = 17;
pub const SURFACE_FORMAT_R8G8_UNORM: SurfaceFormat = 18;
pub const SURFACE_FORMAT_R32_FLOAT: SurfaceFormat = 19;
pub type SurfaceFormat = ::std::os::raw::c_uint;
pub const RESOURCE_USAGE_READ_ONLY: ResourceUsage = 0;
pub const RESOURCE_USAGE_RENDERTARGET: ResourceUsage = 1;
pub const RESOURCE_USAGE_UAV: ResourceUsage = 2;
pub type ResourceUsage = ::std::os::raw::c_uint;
pub const RESOURCE_STATE_UNORDERED_ACCESS: ResourceStates = 1;
pub const RESOURCE_STATE_COMPUTE_READ: ResourceStates = 2;
pub const RESOURCE_STATE_COPY_SRC: ResourceStates = 4;
pub const RESOURCE_STATE_COPY_DEST: ResourceStates = 8;
pub const RESOURCE_STATE_GENERIC_READ: ResourceStates = 6;
pub type ResourceStates = ::std::os::raw::c_uint;
pub const RESOURCE_DIMENSION_TEXTURE_1D: ResourceDimension = 0;
pub const RESOURCE_DIMENSION_TEXTURE_2D: ResourceDimension = 1;
pub type ResourceDimension = ::std::os::raw::c_uint;
pub const RESOURCE_FLAGS_NONE: ResourceFlags = 0;
pub const RESOURCE_FLAGS_ALIASABLE: ResourceFlags = 1;
pub type ResourceFlags = ::std::os::raw::c_uint;
pub const RESOURCE_VIEW_UNORDERED_ACCESS: ResourceViewType = 0;
pub const RESOURCE_VIEW_SHADER_READ: ResourceViewType = 1;
pub type ResourceViewType = ::std::os::raw::c_uint;
pub const FILTER_TYPE_POINT: FilterType = 0;
pub const FILTER_TYPE_LINEAR: FilterType = 1;
pub type FilterType = ::std::os::raw::c_uint;
pub const SHADER_MODEL_5_1: ShaderModel = 0;
pub const SHADER_MODEL_6_0: ShaderModel = 1;
pub const SHADER_MODEL_6_1: ShaderModel = 2;
pub const SHADER_MODEL_6_2: ShaderModel = 3;
pub const SHADER_MODEL_6_3: ShaderModel = 4;
pub const SHADER_MODEL_6_4: ShaderModel = 5;
pub const SHADER_MODEL_6_5: ShaderModel = 6;
pub const SHADER_MODEL_6_6: ShaderModel = 7;
pub const SHADER_MODEL_6_7: ShaderModel = 8;
pub type ShaderModel = ::std::os::raw::c_uint;
pub const RESOURCE_TYPE_BUFFER: ResourceType = 0;
pub const RESOURCE_TYPE_TEXTURE1D: ResourceType = 1;
pub const RESOURCE_TYPE_TEXTURE2D: ResourceType = 2;
pub const RESOURCE_TYPE_TEXTURE3D: ResourceType = 3;
pub type ResourceType = ::std::os::raw::c_uint;
pub const HEAP_TYPE_DEFAULT: HeapType = 0;
pub const HEAP_TYPE_UPLOAD: HeapType = 1;
pub type HeapType = ::std::os::raw::c_uint;
pub const GPU_JOB_CLEAR_FLOAT: GpuJobType = 0;
pub const GPU_JOB_COPY: GpuJobType = 1;
pub const GPU_JOB_COMPUTE: GpuJobType = 2;
pub type GpuJobType = ::std::os::raw::c_uint;
pub type Device = *mut ::std::os::raw::c_void;
pub type CommandList = *mut ::std::os::raw::c_void;
pub type RootSignature = *mut ::std::os::raw::c_void;
pub type Pipeline = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceCapabilities {
    pub minimumSupportedShaderModel: ShaderModel,
    pub waveLaneCountMin: u32,
    pub waveLaneCountMax: u32,
    pub fp16Supported: bool,
    pub raytracingSupported: bool,
}
#[test]
fn bindgen_test_layout_DeviceCapabilities() {
    const UNINIT: ::std::mem::MaybeUninit<DeviceCapabilities> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeviceCapabilities>(),
        16usize,
        concat!("Size of: ", stringify!(DeviceCapabilities))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceCapabilities>(),
        4usize,
        concat!("Alignment of ", stringify!(DeviceCapabilities))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimumSupportedShaderModel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceCapabilities),
            "::",
            stringify!(minimumSupportedShaderModel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveLaneCountMin) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceCapabilities),
            "::",
            stringify!(waveLaneCountMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveLaneCountMax) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceCapabilities),
            "::",
            stringify!(waveLaneCountMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp16Supported) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceCapabilities),
            "::",
            stringify!(fp16Supported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raytracingSupported) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceCapabilities),
            "::",
            stringify!(raytracingSupported)
        )
    );
}
impl Default for DeviceCapabilities {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Dimensions2D {
    pub width: u32,
    pub height: u32,
}
#[test]
fn bindgen_test_layout_Dimensions2D() {
    const UNINIT: ::std::mem::MaybeUninit<Dimensions2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dimensions2D>(),
        8usize,
        concat!("Size of: ", stringify!(Dimensions2D))
    );
    assert_eq!(
        ::std::mem::align_of::<Dimensions2D>(),
        4usize,
        concat!("Alignment of ", stringify!(Dimensions2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Dimensions2D),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Dimensions2D),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IntCoords2D {
    pub x: i32,
    pub y: i32,
}
#[test]
fn bindgen_test_layout_IntCoords2D() {
    const UNINIT: ::std::mem::MaybeUninit<IntCoords2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IntCoords2D>(),
        8usize,
        concat!("Size of: ", stringify!(IntCoords2D))
    );
    assert_eq!(
        ::std::mem::align_of::<IntCoords2D>(),
        4usize,
        concat!("Alignment of ", stringify!(IntCoords2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IntCoords2D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IntCoords2D),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct FloatCoords2D {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_FloatCoords2D() {
    const UNINIT: ::std::mem::MaybeUninit<FloatCoords2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FloatCoords2D>(),
        8usize,
        concat!("Size of: ", stringify!(FloatCoords2D))
    );
    assert_eq!(
        ::std::mem::align_of::<FloatCoords2D>(),
        4usize,
        concat!("Alignment of ", stringify!(FloatCoords2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FloatCoords2D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FloatCoords2D),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResourceDescription {
    pub type_: ResourceType,
    pub format: SurfaceFormat,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
    pub mipCount: u32,
    pub flags: ResourceFlags,
}
#[test]
fn bindgen_test_layout_ResourceDescription() {
    const UNINIT: ::std::mem::MaybeUninit<ResourceDescription> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ResourceDescription>(),
        28usize,
        concat!("Size of: ", stringify!(ResourceDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<ResourceDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(ResourceDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceDescription),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceDescription),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceDescription),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceDescription),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceDescription),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceDescription),
            "::",
            stringify!(mipCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceDescription),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for ResourceDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Resource {
    pub resource: *mut ::std::os::raw::c_void,
    pub name: [u16; 64usize],
    pub description: ResourceDescription,
    pub state: ResourceStates,
    pub isDepth: bool,
    pub descriptorData: u64,
}
#[test]
fn bindgen_test_layout_Resource() {
    const UNINIT: ::std::mem::MaybeUninit<Resource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Resource>(),
        184usize,
        concat!("Size of: ", stringify!(Resource))
    );
    assert_eq!(
        ::std::mem::align_of::<Resource>(),
        8usize,
        concat!("Alignment of ", stringify!(Resource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Resource),
            "::",
            stringify!(resource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Resource),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Resource),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(Resource),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isDepth) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Resource),
            "::",
            stringify!(isDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorData) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Resource),
            "::",
            stringify!(descriptorData)
        )
    );
}
impl Default for Resource {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ResourceInternal {
    pub internalIndex: i32,
}
#[test]
fn bindgen_test_layout_ResourceInternal() {
    const UNINIT: ::std::mem::MaybeUninit<ResourceInternal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ResourceInternal>(),
        4usize,
        concat!("Size of: ", stringify!(ResourceInternal))
    );
    assert_eq!(
        ::std::mem::align_of::<ResourceInternal>(),
        4usize,
        concat!("Alignment of ", stringify!(ResourceInternal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceInternal),
            "::",
            stringify!(internalIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResourceBinding {
    pub slotIndex: u32,
    pub resourceIdentifier: u32,
    pub name: [u16; 64usize],
}
#[test]
fn bindgen_test_layout_ResourceBinding() {
    const UNINIT: ::std::mem::MaybeUninit<ResourceBinding> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ResourceBinding>(),
        136usize,
        concat!("Size of: ", stringify!(ResourceBinding))
    );
    assert_eq!(
        ::std::mem::align_of::<ResourceBinding>(),
        4usize,
        concat!("Alignment of ", stringify!(ResourceBinding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slotIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceBinding),
            "::",
            stringify!(slotIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceIdentifier) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceBinding),
            "::",
            stringify!(resourceIdentifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceBinding),
            "::",
            stringify!(name)
        )
    );
}
impl Default for ResourceBinding {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineState {
    pub rootSignature: RootSignature,
    pub pipeline: Pipeline,
    pub uavCount: u32,
    pub srvCount: u32,
    pub constCount: u32,
    pub uavResourceBindings: [ResourceBinding; 8usize],
    pub srvResourceBindings: [ResourceBinding; 16usize],
    pub cbResourceBindings: [ResourceBinding; 2usize],
}
#[test]
fn bindgen_test_layout_PipelineState() {
    const UNINIT: ::std::mem::MaybeUninit<PipelineState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PipelineState>(),
        3568usize,
        concat!("Size of: ", stringify!(PipelineState))
    );
    assert_eq!(
        ::std::mem::align_of::<PipelineState>(),
        8usize,
        concat!("Alignment of ", stringify!(PipelineState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rootSignature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineState),
            "::",
            stringify!(rootSignature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineState),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uavCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineState),
            "::",
            stringify!(uavCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srvCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineState),
            "::",
            stringify!(srvCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineState),
            "::",
            stringify!(constCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uavResourceBindings) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineState),
            "::",
            stringify!(uavResourceBindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srvResourceBindings) as usize - ptr as usize },
        1116usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineState),
            "::",
            stringify!(srvResourceBindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbResourceBindings) as usize - ptr as usize },
        3292usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineState),
            "::",
            stringify!(cbResourceBindings)
        )
    );
}
impl Default for PipelineState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CreateResourceDescription {
    pub heapType: HeapType,
    pub resourceDescription: ResourceDescription,
    pub initalState: ResourceStates,
    pub initDataSize: u32,
    pub initData: *mut ::std::os::raw::c_void,
    pub name: *const u16,
    pub usage: ResourceUsage,
    pub id: u32,
}
#[test]
fn bindgen_test_layout_CreateResourceDescription() {
    const UNINIT: ::std::mem::MaybeUninit<CreateResourceDescription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CreateResourceDescription>(),
        64usize,
        concat!("Size of: ", stringify!(CreateResourceDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<CreateResourceDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(CreateResourceDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heapType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateResourceDescription),
            "::",
            stringify!(heapType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceDescription) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateResourceDescription),
            "::",
            stringify!(resourceDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initalState) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateResourceDescription),
            "::",
            stringify!(initalState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initDataSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateResourceDescription),
            "::",
            stringify!(initDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateResourceDescription),
            "::",
            stringify!(initData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateResourceDescription),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateResourceDescription),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CreateResourceDescription),
            "::",
            stringify!(id)
        )
    );
}
impl Default for CreateResourceDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineDescription {
    pub contextFlags: u32,
    pub samplers: *mut FilterType,
    pub samplerCount: usize,
    pub rootConstantBufferSizes: *const u32,
    pub rootConstantBufferCount: u32,
}
#[test]
fn bindgen_test_layout_PipelineDescription() {
    const UNINIT: ::std::mem::MaybeUninit<PipelineDescription> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PipelineDescription>(),
        40usize,
        concat!("Size of: ", stringify!(PipelineDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<PipelineDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(PipelineDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineDescription),
            "::",
            stringify!(contextFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineDescription),
            "::",
            stringify!(samplers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineDescription),
            "::",
            stringify!(samplerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rootConstantBufferSizes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineDescription),
            "::",
            stringify!(rootConstantBufferSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rootConstantBufferCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PipelineDescription),
            "::",
            stringify!(rootConstantBufferCount)
        )
    );
}
impl Default for PipelineDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConstantBuffer {
    pub uint32Size: u32,
    pub data: [u32; 64usize],
}
#[test]
fn bindgen_test_layout_ConstantBuffer() {
    const UNINIT: ::std::mem::MaybeUninit<ConstantBuffer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConstantBuffer>(),
        260usize,
        concat!("Size of: ", stringify!(ConstantBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ConstantBuffer>(),
        4usize,
        concat!("Alignment of ", stringify!(ConstantBuffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConstantBuffer),
            "::",
            stringify!(uint32Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ConstantBuffer),
            "::",
            stringify!(data)
        )
    );
}
impl Default for ConstantBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ClearFloatJobDescription {
    pub color: [f32; 4usize],
    pub target: ResourceInternal,
}
#[test]
fn bindgen_test_layout_ClearFloatJobDescription() {
    const UNINIT: ::std::mem::MaybeUninit<ClearFloatJobDescription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ClearFloatJobDescription>(),
        20usize,
        concat!("Size of: ", stringify!(ClearFloatJobDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<ClearFloatJobDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(ClearFloatJobDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ClearFloatJobDescription),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ClearFloatJobDescription),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComputeJobDescription {
    pub pipeline: PipelineState,
    pub dimensions: [u32; 3usize],
    pub srvs: [ResourceInternal; 16usize],
    pub srvNames: [[u16; 64usize]; 16usize],
    pub uavs: [ResourceInternal; 8usize],
    pub uavMip: [u32; 8usize],
    pub uavNames: [[u16; 64usize]; 8usize],
    pub cbs: [ConstantBuffer; 2usize],
    pub cbNames: [[u16; 64usize]; 2usize],
    pub cbSlotIndex: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_ComputeJobDescription() {
    const UNINIT: ::std::mem::MaybeUninit<ComputeJobDescription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ComputeJobDescription>(),
        7568usize,
        concat!("Size of: ", stringify!(ComputeJobDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<ComputeJobDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(ComputeJobDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimensions) as usize - ptr as usize },
        3568usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(dimensions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srvs) as usize - ptr as usize },
        3580usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(srvs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srvNames) as usize - ptr as usize },
        3644usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(srvNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uavs) as usize - ptr as usize },
        5692usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(uavs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uavMip) as usize - ptr as usize },
        5724usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(uavMip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uavNames) as usize - ptr as usize },
        5756usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(uavNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbs) as usize - ptr as usize },
        6780usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(cbs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbNames) as usize - ptr as usize },
        7300usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(cbNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbSlotIndex) as usize - ptr as usize },
        7556usize,
        concat!(
            "Offset of field: ",
            stringify!(ComputeJobDescription),
            "::",
            stringify!(cbSlotIndex)
        )
    );
}
impl Default for ComputeJobDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CopyJobDescription {
    pub src: ResourceInternal,
    pub dst: ResourceInternal,
}
#[test]
fn bindgen_test_layout_CopyJobDescription() {
    const UNINIT: ::std::mem::MaybeUninit<CopyJobDescription> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CopyJobDescription>(),
        8usize,
        concat!("Size of: ", stringify!(CopyJobDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<CopyJobDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(CopyJobDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyJobDescription),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CopyJobDescription),
            "::",
            stringify!(dst)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GpuJobDescription {
    pub jobType: GpuJobType,
    pub __bindgen_anon_1: GpuJobDescription__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union GpuJobDescription__bindgen_ty_1 {
    pub clearJobDescriptor: ClearFloatJobDescription,
    pub copyJobDescriptor: CopyJobDescription,
    pub computeJobDescriptor: ComputeJobDescription,
}
#[test]
fn bindgen_test_layout_GpuJobDescription__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<GpuJobDescription__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GpuJobDescription__bindgen_ty_1>(),
        7568usize,
        concat!("Size of: ", stringify!(GpuJobDescription__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<GpuJobDescription__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(GpuJobDescription__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearJobDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GpuJobDescription__bindgen_ty_1),
            "::",
            stringify!(clearJobDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copyJobDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GpuJobDescription__bindgen_ty_1),
            "::",
            stringify!(copyJobDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computeJobDescriptor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GpuJobDescription__bindgen_ty_1),
            "::",
            stringify!(computeJobDescriptor)
        )
    );
}
impl Default for GpuJobDescription__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_GpuJobDescription() {
    const UNINIT: ::std::mem::MaybeUninit<GpuJobDescription> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GpuJobDescription>(),
        7576usize,
        concat!("Size of: ", stringify!(GpuJobDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<GpuJobDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(GpuJobDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jobType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GpuJobDescription),
            "::",
            stringify!(jobType)
        )
    );
}
impl Default for GpuJobDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const PI: f32 = 3.1415927410125732;
pub const EPSILON: f32 = 0.0000009999999974752427;
pub type AssertCallback =
    ::std::option::Option<unsafe extern "C" fn(message: *const ::std::os::raw::c_char)>;
extern "C" {
    #[link_name = "\u{1}ffxAssertReport"]
    pub fn assertReport(
        file: *const ::std::os::raw::c_char,
        line: i32,
        condition: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}ffxAssertSetPrintingCallback"]
    pub fn assertSetPrintingCallback(callback: AssertCallback);
}
pub type ErrorCode = i32;
pub const OK: ErrorCode = 0;
pub const ERROR_INVALID_POINTER: ErrorCode = -2147483648;
pub const ERROR_INVALID_ALIGNMENT: ErrorCode = -2147483647;
pub const ERROR_INVALID_SIZE: ErrorCode = -2147483646;
pub const EOF: ErrorCode = -2147483645;
pub const ERROR_INVALID_PATH: ErrorCode = -2147483644;
pub const ERROR_EOF: ErrorCode = -2147483643;
pub const ERROR_MALFORMED_DATA: ErrorCode = -2147483642;
pub const ERROR_OUT_OF_MEMORY: ErrorCode = -2147483641;
pub const ERROR_INCOMPLETE_INTERFACE: ErrorCode = -2147483640;
pub const ERROR_INVALID_ENUM: ErrorCode = -2147483639;
pub const ERROR_INVALID_ARGUMENT: ErrorCode = -2147483638;
pub const ERROR_OUT_OF_RANGE: ErrorCode = -2147483637;
pub const ERROR_NULL_DEVICE: ErrorCode = -2147483636;
pub const ERROR_BACKEND_API_ERROR: ErrorCode = -2147483635;
pub const ERROR_INSUFFICIENT_MEMORY: ErrorCode = -2147483634;
pub const PASS_DEPTH_CLIP: Pass = 0;
pub const PASS_RECONSTRUCT_PREVIOUS_DEPTH: Pass = 1;
pub const PASS_LOCK: Pass = 2;
pub const PASS_ACCUMULATE: Pass = 3;
pub const PASS_ACCUMULATE_SHARPEN: Pass = 4;
pub const PASS_RCAS: Pass = 5;
pub const PASS_COMPUTE_LUMINANCE_PYRAMID: Pass = 6;
pub const PASS_GENERATE_REACTIVE: Pass = 7;
pub const PASS_TCR_AUTOGENERATE: Pass = 8;
pub const PASS_COUNT: Pass = 9;
pub type Pass = ::std::os::raw::c_uint;
pub const MESSAGE_TYPE_ERROR: MsgType = 0;
pub const MESSAGE_TYPE_WARNING: MsgType = 1;
pub const MESSAGE_TYPE_COUNT: MsgType = 2;
pub type MsgType = ::std::os::raw::c_uint;
pub type CreateBackendContextFunc = ::std::option::Option<
    unsafe extern "C" fn(backendInterface: *mut Interface, device: Device) -> ErrorCode,
>;
pub type GetDeviceCapabilitiesFunc = ::std::option::Option<
    unsafe extern "C" fn(
        backendInterface: *mut Interface,
        outDeviceCapabilities: *mut DeviceCapabilities,
        device: Device,
    ) -> ErrorCode,
>;
pub type DestroyBackendContextFunc =
    ::std::option::Option<unsafe extern "C" fn(backendInterface: *mut Interface) -> ErrorCode>;
pub type CreateResourceFunc = ::std::option::Option<
    unsafe extern "C" fn(
        backendInterface: *mut Interface,
        createResourceDescription: *const CreateResourceDescription,
        outResource: *mut ResourceInternal,
    ) -> ErrorCode,
>;
pub type RegisterResourceFunc = ::std::option::Option<
    unsafe extern "C" fn(
        backendInterface: *mut Interface,
        inResource: *const Resource,
        outResource: *mut ResourceInternal,
    ) -> ErrorCode,
>;
pub type UnregisterResourcesFunc =
    ::std::option::Option<unsafe extern "C" fn(backendInterface: *mut Interface) -> ErrorCode>;
pub type GetResourceDescriptionFunc = ::std::option::Option<
    unsafe extern "C" fn(
        backendInterface: *mut Interface,
        resource: ResourceInternal,
    ) -> ResourceDescription,
>;
pub type DestroyResourceFunc = ::std::option::Option<
    unsafe extern "C" fn(backendInterface: *mut Interface, resource: ResourceInternal) -> ErrorCode,
>;
pub type CreatePipelineFunc = ::std::option::Option<
    unsafe extern "C" fn(
        backendInterface: *mut Interface,
        pass: Pass,
        pipelineDescription: *const PipelineDescription,
        outPipeline: *mut PipelineState,
    ) -> ErrorCode,
>;
pub type DestroyPipelineFunc = ::std::option::Option<
    unsafe extern "C" fn(
        backendInterface: *mut Interface,
        pipeline: *mut PipelineState,
    ) -> ErrorCode,
>;
pub type ScheduleGpuJobFunc = ::std::option::Option<
    unsafe extern "C" fn(
        backendInterface: *mut Interface,
        job: *const GpuJobDescription,
    ) -> ErrorCode,
>;
pub type ExecuteGpuJobsFunc = ::std::option::Option<
    unsafe extern "C" fn(backendInterface: *mut Interface, commandList: CommandList) -> ErrorCode,
>;
pub type Message = ::std::option::Option<unsafe extern "C" fn(type_: MsgType, message: *const u16)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Interface {
    pub fpCreateBackendContext: CreateBackendContextFunc,
    pub fpGetDeviceCapabilities: GetDeviceCapabilitiesFunc,
    pub fpDestroyBackendContext: DestroyBackendContextFunc,
    pub fpCreateResource: CreateResourceFunc,
    pub fpRegisterResource: RegisterResourceFunc,
    pub fpUnregisterResources: UnregisterResourcesFunc,
    pub fpGetResourceDescription: GetResourceDescriptionFunc,
    pub fpDestroyResource: DestroyResourceFunc,
    pub fpCreatePipeline: CreatePipelineFunc,
    pub fpDestroyPipeline: DestroyPipelineFunc,
    pub fpScheduleGpuJob: ScheduleGpuJobFunc,
    pub fpExecuteGpuJobs: ExecuteGpuJobsFunc,
    pub scratchBuffer: *mut ::std::os::raw::c_void,
    pub scratchBufferSize: usize,
}
#[test]
fn bindgen_test_layout_Interface() {
    const UNINIT: ::std::mem::MaybeUninit<Interface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Interface>(),
        112usize,
        concat!("Size of: ", stringify!(Interface))
    );
    assert_eq!(
        ::std::mem::align_of::<Interface>(),
        8usize,
        concat!("Alignment of ", stringify!(Interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpCreateBackendContext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpCreateBackendContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpGetDeviceCapabilities) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpGetDeviceCapabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpDestroyBackendContext) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpDestroyBackendContext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpCreateResource) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpCreateResource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpRegisterResource) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpRegisterResource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpUnregisterResources) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpUnregisterResources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpGetResourceDescription) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpGetResourceDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpDestroyResource) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpDestroyResource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpCreatePipeline) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpCreatePipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpDestroyPipeline) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpDestroyPipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpScheduleGpuJob) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpScheduleGpuJob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpExecuteGpuJobs) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(fpExecuteGpuJobs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scratchBuffer) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(scratchBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scratchBufferSize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Interface),
            "::",
            stringify!(scratchBufferSize)
        )
    );
}
impl Default for Interface {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const QUALITY_MODE_QUALITY: QualityMode = 1;
pub const QUALITY_MODE_BALANCED: QualityMode = 2;
pub const QUALITY_MODE_PERFORMANCE: QualityMode = 3;
pub const QUALITY_MODE_ULTRA_PERFORMANCE: QualityMode = 4;
pub type QualityMode = ::std::os::raw::c_uint;
pub const ENABLE_HIGH_DYNAMIC_RANGE: InitializationFlagBits = 1;
pub const ENABLE_DISPLAY_RESOLUTION_MOTION_VECTORS: InitializationFlagBits = 2;
pub const ENABLE_MOTION_VECTORS_JITTER_CANCELLATION: InitializationFlagBits = 4;
pub const ENABLE_DEPTH_INVERTED: InitializationFlagBits = 8;
pub const ENABLE_DEPTH_INFINITE: InitializationFlagBits = 16;
pub const ENABLE_AUTO_EXPOSURE: InitializationFlagBits = 32;
pub const ENABLE_DYNAMIC_RESOLUTION: InitializationFlagBits = 64;
pub const ENABLE_TEXTURE1D_USAGE: InitializationFlagBits = 128;
pub const ENABLE_DEBUG_CHECKING: InitializationFlagBits = 256;
pub type InitializationFlagBits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ContextDescription {
    pub flags: u32,
    pub maxRenderSize: Dimensions2D,
    pub displaySize: Dimensions2D,
    pub callbacks: Interface,
    pub device: Device,
    pub fpMessage: Message,
}
#[test]
fn bindgen_test_layout_ContextDescription() {
    const UNINIT: ::std::mem::MaybeUninit<ContextDescription> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ContextDescription>(),
        152usize,
        concat!("Size of: ", stringify!(ContextDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<ContextDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(ContextDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextDescription),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRenderSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextDescription),
            "::",
            stringify!(maxRenderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displaySize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextDescription),
            "::",
            stringify!(displaySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callbacks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextDescription),
            "::",
            stringify!(callbacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextDescription),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpMessage) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ContextDescription),
            "::",
            stringify!(fpMessage)
        )
    );
}
impl Default for ContextDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DispatchDescription {
    pub commandList: CommandList,
    pub color: Resource,
    pub depth: Resource,
    pub motionVectors: Resource,
    pub exposure: Resource,
    pub reactive: Resource,
    pub transparencyAndComposition: Resource,
    pub output: Resource,
    pub jitterOffset: FloatCoords2D,
    pub motionVectorScale: FloatCoords2D,
    pub renderSize: Dimensions2D,
    pub enableSharpening: bool,
    pub sharpness: f32,
    pub frameTimeDelta: f32,
    pub preExposure: f32,
    pub reset: bool,
    pub cameraNear: f32,
    pub cameraFar: f32,
    pub cameraFovAngleVertical: f32,
    pub viewSpaceToMetersFactor: f32,
    pub enableAutoReactive: bool,
    pub colorOpaqueOnly: Resource,
    pub autoTcThreshold: f32,
    pub autoTcScale: f32,
    pub autoReactiveScale: f32,
    pub autoReactiveMax: f32,
}
#[test]
fn bindgen_test_layout_DispatchDescription() {
    const UNINIT: ::std::mem::MaybeUninit<DispatchDescription> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DispatchDescription>(),
        1560usize,
        concat!("Size of: ", stringify!(DispatchDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<DispatchDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(DispatchDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(commandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motionVectors) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(motionVectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exposure) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(exposure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactive) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(reactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transparencyAndComposition) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(transparencyAndComposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitterOffset) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(jitterOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motionVectorScale) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(motionVectorScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderSize) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(renderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enableSharpening) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(enableSharpening)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharpness) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(sharpness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameTimeDelta) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(frameTimeDelta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preExposure) as usize - ptr as usize },
        1332usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(preExposure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cameraNear) as usize - ptr as usize },
        1340usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(cameraNear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cameraFar) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(cameraFar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cameraFovAngleVertical) as usize - ptr as usize },
        1348usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(cameraFovAngleVertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewSpaceToMetersFactor) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(viewSpaceToMetersFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enableAutoReactive) as usize - ptr as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(enableAutoReactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorOpaqueOnly) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(colorOpaqueOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoTcThreshold) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(autoTcThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoTcScale) as usize - ptr as usize },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(autoTcScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoReactiveScale) as usize - ptr as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(autoReactiveScale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoReactiveMax) as usize - ptr as usize },
        1556usize,
        concat!(
            "Offset of field: ",
            stringify!(DispatchDescription),
            "::",
            stringify!(autoReactiveMax)
        )
    );
}
impl Default for DispatchDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GenerateReactiveDescription {
    pub commandList: CommandList,
    pub colorOpaqueOnly: Resource,
    pub colorPreUpscale: Resource,
    pub outReactive: Resource,
    pub renderSize: Dimensions2D,
    pub scale: f32,
    pub cutoffThreshold: f32,
    pub binaryValue: f32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_GenerateReactiveDescription() {
    const UNINIT: ::std::mem::MaybeUninit<GenerateReactiveDescription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GenerateReactiveDescription>(),
        584usize,
        concat!("Size of: ", stringify!(GenerateReactiveDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<GenerateReactiveDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(GenerateReactiveDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandList) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(commandList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorOpaqueOnly) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(colorOpaqueOnly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorPreUpscale) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(colorPreUpscale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outReactive) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(outReactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderSize) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(renderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cutoffThreshold) as usize - ptr as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(cutoffThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binaryValue) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(binaryValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(GenerateReactiveDescription),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for GenerateReactiveDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Context {
    pub data: [u32; 16536usize],
}
#[test]
fn bindgen_test_layout_Context() {
    const UNINIT: ::std::mem::MaybeUninit<Context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Context>(),
        66144usize,
        concat!("Size of: ", stringify!(Context))
    );
    assert_eq!(
        ::std::mem::align_of::<Context>(),
        4usize,
        concat!("Alignment of ", stringify!(Context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Context),
            "::",
            stringify!(data)
        )
    );
}
impl Default for Context {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2ContextCreate"]
    pub fn contextCreate(
        context: *mut Context,
        contextDescription: *const ContextDescription,
    ) -> ErrorCode;
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2ContextDispatch"]
    pub fn contextDispatch(
        context: *mut Context,
        dispatchDescription: *const DispatchDescription,
    ) -> ErrorCode;
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2ContextGenerateReactiveMask"]
    pub fn contextGenerateReactiveMask(
        context: *mut Context,
        params: *const GenerateReactiveDescription,
    ) -> ErrorCode;
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2ContextDestroy"]
    pub fn contextDestroy(context: *mut Context) -> ErrorCode;
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2GetUpscaleRatioFromQualityMode"]
    pub fn getUpscaleRatioFromQualityMode(qualityMode: QualityMode) -> f32;
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2GetRenderResolutionFromQualityMode"]
    pub fn getRenderResolutionFromQualityMode(
        renderWidth: *mut u32,
        renderHeight: *mut u32,
        displayWidth: u32,
        displayHeight: u32,
        qualityMode: QualityMode,
    ) -> ErrorCode;
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2GetJitterPhaseCount"]
    pub fn getJitterPhaseCount(renderWidth: i32, displayWidth: i32) -> i32;
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2GetJitterOffset"]
    pub fn getJitterOffset(
        outX: *mut f32,
        outY: *mut f32,
        index: i32,
        phaseCount: i32,
    ) -> ErrorCode;
}
extern "C" {
    #[link_name = "\u{1}ffxFsr2ResourceIsNull"]
    pub fn resourceIsNull(resource: Resource) -> bool;
}
